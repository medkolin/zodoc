#r blog
#t CleanBlog


using System.Globalization;
using System.Text;

public static class Helpers
{
    public static string NormalizeString(this string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return text;

        text = text.Normalize(NormalizationForm.FormD);
        var chars = text.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark).ToArray();
        return new string(chars).Normalize(NormalizationForm.FormC).ToLower().Replace(' ', '-').Replace("#", "-sharp");
    }
}


//these 3 lines are different from config.wyam
Settings[Keys.Host] = "zodoc.netlify.com";
Settings["datazooLink"] = "https://github.com/tesar-tech/zodoc/raw/develop/datazoo";
Settings["BaseViewUrl"] = "https://github.com/tesar-tech/zodoc/blob/develop/input/";
//Settings[Keys.LinkRoot] = "/zodoc";
//

Settings[BlogKeys.Title] = "ZODOC";
Settings[BlogKeys.Description] = "Image processing and deep learning samples";
Settings[BlogKeys.IndexFullPosts] = false;
Settings["Langs"] = new string[] { "en","cs","de"};
Settings["githubIssueLink"] = "https://github.com/tesar-tech/zodoc/issues/new";
Settings[BlogKeys.IndexPageSize] = 100;





Pipelines["BlogPosts"].Append(
  Meta(Keys.RelativeFilePath, (doc, ctx) =>
  {
      //Console.WriteLine(doc.Source.FullPath);
    DateTime published = doc.Get<DateTime>(BlogKeys.Published);
    //Console.WriteLine(doc.Get<String>("RelativeFileDir"));
    string fileName = doc.Bool("FrontMatterPublished")
      ? doc.FilePath(Keys.SourceFileName).ChangeExtension("html").FullPath
      : doc.FilePath(Keys.SourceFileName).ChangeExtension("html").FullPath.Substring(11);//when date is specified in fileName
    return $"{doc.Get<String>("RelativeFileDir")}/{fileName}";
    }));

Pipelines.InsertAfter("Pages","ImagesIntro",//insert somewhere before BlogPosts
  ReadFiles("posts/imgs_intro/*") // get all files from folder imgs_intro
    .Where(x => new[] {  ".jpg", ".jpeg", ".gif", ".png"}.Contains(x.Path.Extension))// filter by extension
);

Pipelines["BlogPosts"].Append(
   Meta ("fileName", (doc,ctx) => { 
     return doc.Get<String>("RelativeFilePath").Split('/').Last();}
    ),
   Meta ("lang",  (doc,ctx) => { //get language of post based on path
       var splits = doc.Get<String>("RelativeFilePath").Split('/');
       if(splits.Last().Split('.').First()=="index")//do not assign type to index pages
         return "";
      var langSplit =  splits.FirstOrDefault(x=>((string[])Settings["Langs"]).Contains(x)); //look for folder with lang string i.e. "en"                     
        return langSplit??"" ;} 
    ),
    Meta ("Image",  (doc,ctx) => {
         var imgLink = doc.String(BlogKeys.Image);
         if(String.IsNullOrEmpty(imgLink))
         {
            var imageWithSameNameAsPost =  ctx.Documents.FromPipeline("ImagesIntro") //get images from pipeline
                    .Where(x=> x.Source.FileNameWithoutExtension.ToString() == doc.Source.FileNameWithoutExtension.ToString()) //convert to str for comparasion
                    .FirstOrDefault();//just first one 
            var imgsFileName = "no_image.png";//default for the case when image is not presented
            if(imageWithSameNameAsPost!= null)//image found
                imgsFileName = imageWithSameNameAsPost.Source.FileName.ToString();//get its filename
             return $"../imgs_intro/{imgsFileName}";
         }
         else
            return imgLink;//do nothing with already set image
     })
);



Pipelines["BlogPosts"].Append(
Meta("otherLanguagesList", (doc, ctx) => {//get other languages of document
        if(doc.String("lang")=="")
         return null;
        var otherLangs =  ctx.Documents //search in other documents
                        .Where(c => c.String("lang") != "" //where the language is set
                            && c.String("lang") != doc.String("lang") //for different languages
                            && c.String("filename")==doc.String("filename")) //same file name 
                            //&& c.String("type")==doc.String("type")) //and same type
                        .Select(x => x.String("lang")).Distinct();
        return otherLangs.Count() ==0 ? null:otherLangs.ToList();//no other lang -> return null;
}));

Pipelines["BlogPosts"].Append(
Meta("otherLanguagesList", (doc, ctx) => {//get other languages of document
        if(doc.String("lang")=="")
         return null;
        var otherLangs =  ctx.Documents //search in other documents
                        .Where(c => c.String("lang") != "" //where the language is set
                            && c.String("lang") != doc.String("lang") //for different languages
                            && c.String("filename")==doc.String("filename")) //same file name 
                            //&& c.String("type")==doc.String("type")) //and same type
                        .Select(x => x.String("lang")).Distinct();
        return otherLangs.Count() ==0 ? null:otherLangs.ToList();//no other lang -> return null;
}));

Pipelines["BlogPosts"].Append(
Meta("similarPosts", (doc, ctx) => {//get similar posts based on tags
        if(doc.Get<string[]>(BlogKeys.Tags) ==null)
         return null;
         //search all docs
        var docsWithSameTags = ctx.Documents.Where(c=> c.String("filename")!=doc.String("filename") //for other documents
              && c.String("lang") == doc.String("lang") //just tags for same language
              && c.Get<string[]>(BlogKeys.Tags) != null)//where tags are presented
              .Select(x=>(x,x.Get<string[]>(BlogKeys.Tags).Intersect(doc.Get<string[]>(BlogKeys.Tags)).Count() ))//get tuple: (document, numOfSameTags)
              .Where(x=>x.Item2>0)//remove docs with 0 same tags
              .OrderByDescending(x=>x.Item2).Take(5)//take five with topmost num of similar tags
              .Select(x=>x.Item1);// get documents from tuples
         return docsWithSameTags;
        
}));


//taken form: https://github.com/Wyamio/Wyam/issues/615
Pipelines.InsertAfter(nameof(Blog.Tags),
    (IPipeline)new Wyam.Web.Pipelines.Archive(
        "AuthorsArticles",
        new Wyam.Web.Pipelines.ArchiveSettings
        {
            Pipelines = new string[] { Blog.BlogPosts },
            TemplateFile = ctx => "_Author.cshtml",
            Layout = "/_Layout.cshtml",
            Group = (doc, ctx) => doc.List<string>("Authors"),
            CaseInsensitiveGroupComparer = ctx => ctx.Bool(BlogKeys.CaseInsensitiveTags),
            PageSize = ctx => ctx.Get(BlogKeys.IndexPageSize, int.MaxValue),
            Title = (doc, ctx) => doc.String(Keys.GroupKey),
            RelativePath = (doc, ctx) => $"authors/{(doc.String(Keys.GroupKey)).NormalizeString()}.html",
            GroupDocumentsMetadataKey = BlogKeys.Posts,
            GroupKeyMetadataKey = "Author"
        }));

Pipelines.InsertAfter("AuthorsArticles", "AuthorsIndex",
    If(
    ctx => ctx.Documents["AuthorsArticles"].Any(),
    ReadFiles("_Authors.cshtml"),
    FrontMatter(Yaml()),
    Razor().IgnorePrefix(null).WithLayout("_Layout.cshtml"),
    WriteFiles((doc, ctx) => "authors/index.html"))
    .WithoutUnmatchedDocuments());


